#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *next;
}*head;
int count;
void create()
{
    struct node *temp,*newnode;
    head=NULL;
    int choice;
    while(choice)
    {
        newnode=(struct node*)malloc(sizeof(struct node));
        printf("enter data :");
        scanf("%d",&newnode->data);
        newnode->next=NULL;
        if(head==NULL)
            temp=head=newnode;
        else
        {
            temp->next=newnode;
            temp=newnode;
        }
        count++;
        printf("do you want to continue:1->yes, 0->no:");
        scanf("%d",&choice);
    }
}
void display()
{
    struct node *temp;
    if(head==NULL)
        printf("empty list");
    else
    {
        temp=head;
        while(temp!=NULL)
        {
            printf("%d\t",temp->data);
            temp=temp->next;
        }
    }
    printf("\nno.of nodes %d\n",count);
}
void ins_beg()
{
    struct node *newnode;
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("enter data :");
    scanf("%d",&newnode->data);
    newnode->next=head;
    head=newnode;
    count++;
}
void ins_end()
{
    struct node *temp,*newnode;
    newnode=(struct node*)malloc(sizeof(struct node));
    printf("enter data :");
    scanf("%d",&newnode->data);
    newnode->next=NULL;
    temp=head;
    while(temp->next!=NULL)
        temp=temp->next;
    temp->next=newnode;
    count++;
}
void ins_aft_pos()
{
    struct node *temp,*newnode;
    int pos;
    int i=1;
    printf("enter position:");
    scanf("%d",&pos);
    if(pos>count)
        printf("invalid position\n");
    else
    {
        temp=head;
        while(i<pos)
        {
            temp=temp->next;
            i++;
        }
        newnode=(struct node*)malloc(sizeof(struct node));
        printf("enter data :");
        scanf("%d",&newnode->data);
        newnode->next=temp->next;
        temp->next=newnode;
        count++;
    }
}
void ins_bef_pos()
{
    struct node *temp,*newnode;
    int pos;
    int i=1;
    printf("enter position:");
    scanf("%d",&pos);
    if(pos>count)
        printf("invalid position\n");
    else
    {
        temp=head;
        while(i<pos-1)
        {
            temp=temp->next;
            i++;
        }
        newnode=(struct node*)malloc(sizeof(struct node));
        printf("enter data :");
        scanf("%d",&newnode->data);
        newnode->next=temp->next;
        temp->next=newnode;
        count++;
    }
}
int main()
{
    int a;
    printf("list operations are:\n");
    printf("1:create\n2:display\n3.insret at begg\n4.ins_end\n5.ins-aft_pos\n6.ins_bef_pos\n7.exit\n");
    do{
        printf("enter your choice:");
        scanf("%d",&a);
        switch(a)
        {
            case 1:create();
                    break;
            case 2:display();
                    break;
            case 3:
                    ins_beg();
                    break;
            case 4:
                    ins_end();
                    break;
            case 5:
                    ins_aft_pos();
                    break;
            case 6:
                    ins_bef_pos();
                    break;
            case 7:
                    printf("exit point");
                    break;
            
            default:printf("enter a value correctly");
        }
    }
    while(a!=7);
}


output:

list operations are:
1:create
2:display
3.insret at begg
4.ins_end
5.ins-aft_pos
6.ins_bef_pos
7.exit
enter your choice:1
enter data :2
do you want to continue:1->yes, 0->no:1
enter data :3
do you want to continue:1->yes, 0->no:0
enter your choice:2
2       3
no.of nodes 2
enter your choice:5
enter position:2
enter data :4
enter your choice:2
2       3       4
no.of nodes 3
enter your choice:6
enter position:2
enter data :7
enter your choice:2
2       7       3       4
no.of nodes 4
enter your choice:7
exit point
